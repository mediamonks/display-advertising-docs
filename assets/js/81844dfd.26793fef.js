"use strict";(self.webpackChunkdisplay_advertising_docs=self.webpackChunkdisplay_advertising_docs||[]).push([[461],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return u}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=d(t),u=a,g=c["".concat(s,".").concat(u)]||c[u]||p[u]||o;return t?r.createElement(g,l(l({ref:n},m),{},{components:t})):r.createElement(g,l({ref:n},m))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=c;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var d=2;d<o;d++)l[d]=t[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8555:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return p}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),l=["components"],i={sidebar_position:2},s="Temple utils",d={unversionedId:"guides/using-utils",id:"guides/using-utils",title:"Temple utils",description:"Multiple utils are included in the display-temple repository that can save us a lot of work. Below are some examples:",source:"@site/docs/guides/using-utils.md",sourceDirName:"guides",slug:"/guides/using-utils",permalink:"/display-advertising-docs/docs/guides/using-utils",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guides/using-utils.md",tags:[],version:"current",lastUpdatedBy:"trung",lastUpdatedAt:1655126496,formattedLastUpdatedAt:"6/13/2022",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Good practices with Handlebars",permalink:"/display-advertising-docs/docs/guides/using-handlebars"},next:{title:"Font Subsetting",permalink:"/display-advertising-docs/docs/guides/font-subsetting"}},m={},p=[{value:"browser",id:"browser",level:2},{value:"fitText",id:"fittext",level:2},{value:"isElementLoaded",id:"iselementloaded",level:2},{value:"loadAll",id:"loadall",level:2},{value:"loadImage",id:"loadimage",level:2},{value:"loadScriptAll",id:"loadscriptall",level:2},{value:"loadJSON",id:"loadjson",level:2},{value:"masker",id:"masker",level:2},{value:"rgbToHex",id:"rgbtohex",level:2}],c={toc:p};function u(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"temple-utils"},"Temple utils"),(0,o.kt)("p",null,"Multiple utils are included in the display-temple repository that can save us a lot of work. Below are some examples:"),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can check all the utils inside ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mediamonks/display-temple/tree/master/src/util"},"the github repository"),"."))),(0,o.kt)("h2",{id:"browser"},"browser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * Shows information about the device used.\n * \n * @type {{\n *  isMobile: boolean\n *  isOS: boolean\n *  isOS9up: boolean\n *  isPad: boolean\n *  isSafari: boolean\n *  isFirefox: boolean\n *  isChrome: boolean\n *  isEdge: boolean\n *  isOpera: boolean\n * }}\n */\n\nimport Browser from "@mediamonks/display-temple/util/Browser";\n\nconsole.log(Browser.isChrome)\n')),(0,o.kt)("h2",{id:"fittext"},"fitText"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {Array<HTMLElement>} copyElements\n */\n\nimport fitText from \"@mediamonks/display-temple/util/fitText\";\n\nconst title = document.body.querySelector('.title');\nconst ctaCopy = document.body.querySelector('.cta_copy');\n\nfitText([title, ctaCopy]);\n")),(0,o.kt)("p",null,"Import fitText from the display-temple/util library."),(0,o.kt)("p",null,"Use fitText on the child element where you want to apply the font size scaling, to fit the parent container."),(0,o.kt)("p",null,"And put the styling i.g. font size, width and height on the parent container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},".parent_container {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 80%;\n    height: 50%;\n    font-family: OpenSans, sans-serif;\n    transform: translate(-50%, -50%);\n    font-size: 50px;\n}\n")),(0,o.kt)("p",null,"Here is an example on how it would look like in the dom:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<div class="parent_container">\n    <div class="child_container">Hello World</div>\n</div>\n')),(0,o.kt)("h2",{id:"iselementloaded"},"isElementLoaded"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Wait for a DOM element to load.\n *\n * @param {string} selector\n * @param {number} time\n * \n * @returns {Promise<HTMLImageElement>}\n */\n\nimport isElementLoaded from \"@mediamonks/display-temple/util/isElementLoaded\";\n\n\nisElementLoaded('svg.logo')\n    .then((elm) => elm);\n\nisElementLoaded('.containerHidden', 2000)\n    .then((elm) => elm);\n")),(0,o.kt)("h2",{id:"loadall"},"loadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Loads multiple files and output an array with the objects\n * \n * @param {Array<string>} urls\n * @param {boolean} sequential\n * @param {function} loader\n *\n * @return {Promise<Array>}\n */\n\nimport loadAll from \"@mediamonks/display-temple/util/loadAll\";\n\nloadAll(['./my_example_image.png', './my_example_image2.png', './my_example_image3.png'], true)\n    .then(() => console.log('all loaded!'))\n    .catch((error) => console.error(error));;\n\nloadAll(['./custom_image.png'])\n    .then(() => console.log('all loaded!'))\n    .catch((error) => console.error(error));\n")),(0,o.kt)("h2",{id:"loadimage"},"loadImage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Loads an image and returns the image element\n * \n * @param {string} src\n *\n * @return {Promise<Array>}\n */\n\nimport loadImage from \"@mediamonks/display-temple/util/loadImage\";\n\nloadImage(['./background.png'])\n    .then(() => console.log('image loaded'))\n    .catch((error) => console.error(error));\n")),(0,o.kt)("h2",{id:"loadscriptall"},"loadScriptAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Loads multiple files and output an array with the objects\n * \n * @param {Array<string>} urls\n * @param {boolean} sequential\n *\n * @return {Promise<Array>}\n */\n\nimport loadScriptAll from \"@mediamonks/display-temple/util/loadScriptAll\";\n\nloadScriptAll(['./mycustomScript.js', './mycustomScript2.js', './mycustomScript3.js'], true);\n    .then(() => console.log('scripts loaded'))\n    .catch((error) => console.error(error));\n")),(0,o.kt)("h2",{id:"loadjson"},"loadJSON"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Loads an image and returns the image element\n * \n * @param {string} src\n *\n * @return {Promise<Array>}\n */\n\nimport loadJSON from \"@mediamonks/display-temple/util/loadJSON\";\n\nloadJSON('https://jsonplaceholder.typicode.com/todos/1')\n    .then((data) => console.log(data))\n    .catch((error) => console.error(error));\n")),(0,o.kt)("h2",{id:"masker"},"masker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Will add canvas elements to the wrapper that are masked by the png images\n * \n * @param {array} config\n * @param {HTMLElement} wrapper\n * \n * @return {Promise<unknown>}\n */\n\nimport masker from \"@mediamonks/display-temple/util/masker\";\n\nmasker(['./bg.jpg', './bg_transparent_white_small.png'], document.body.querySelectorAll('.wrapper'))\n    .then(() => console.log('mask ready'))\n    .catch((error) => console.error(error));;\n")),(0,o.kt)("h2",{id:"rgbtohex"},"rgbToHex"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * Convert the RGB to hex code\n * \n * @param {number} r\n * @param {number} g\n * @param {number} b\n *\n * @returns {string>}\n */\n\nimport rgbToHex from "@mediamonks/display-temple/util/rgbToHex";\n\nrgbToHex(0, 51, 255)\n')))}u.isMDXComponent=!0}}]);